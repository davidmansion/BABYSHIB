{
		"language": "Solidity",
		"sources": {
			"BABYSHIB.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b > a) return (false, 0); return (true, a - b); } }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a / b); } }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a % b); } }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { return a % b; }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b <= a, errorMessage); return a - b; } }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a / b; } }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a % b; } }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal { (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::safeApprove: approve failed'); }\r\n    function safeTransfer(address token, address to, uint256 value) internal { (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::safeTransfer: transfer failed'); }\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal { (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::transferFrom: transferFrom failed'); }\r\n    function safeTransferETH(address to, uint256 value) internal { (bool success, ) = to.call{value: value}(new bytes(0)); require(success, 'TransferHelper::safeTransferETH: ETH transfer failed'); }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\ncontract TokenBus {\r\n    address public deployer;\r\n    address public token;\r\n\r\n    constructor (address token_, address deployer_) {\r\n        deployer = deployer_;\r\n        token = token_;\r\n        IERC20(token_).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n\r\n    function sweep() external {\r\n        require(msg.sender == deployer, \"Only deployer can sweep\");\r\n        IERC20(token).transfer(deployer, IERC20(token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n    function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() { _transferOwnership(_msgSender()); }\r\n    modifier onlyOwner() { _checkOwner(); _; }\r\n    function owner() public view virtual returns (address) { return _owner; }\r\n    function _checkOwner() internal view virtual { require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); }\r\n    function renounceOwnership() public virtual onlyOwner { _transferOwnership(address(0)); }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner); }\r\n    function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) { _name = name_; _symbol = symbol_; _decimals = decimals_; }\r\n    function name() public view virtual override returns (string memory) { return _name; }\r\n    function symbol() public view virtual override returns (string memory) { return _symbol; }\r\n    function decimals() public view virtual override returns (uint8) { return _decimals; }\r\n    function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) { address owner = _msgSender(); _transfer(owner, to, amount); return true; }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) { address owner = _msgSender(); _approve(owner, spender, amount); return true; }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) { address spender = _msgSender(); _spendAllowance(from, spender, amount); _transfer(from, to, amount); return true; }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { address owner = _msgSender(); _approve(owner, spender, allowance(owner, spender) + addedValue); return true; }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked { _approve(owner, spender, currentAllowance - subtractedValue); }\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked { _balances[from] = fromBalance - amount; _balances[to] += amount; }\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        unchecked { _balances[account] += amount; }\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked { _balances[account] = accountBalance - amount; _totalSupply -= amount; }\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked { _approve(owner, spender, currentAllowance - amount); }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract BABYSHIB is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public wbone;\r\n    address public mainpair;\r\n    address public routerAddr = 0xDdcb1Fb0dC2Bc5D750F1351fB6f471e1CaF2D10b; // ballswap\r\n    address public marketingAddr = 0x8118e74B5F0696C811D528CA8821Bc2EE0b06Db6;\r\n    bool public launched;\r\n\r\n    uint256 public buyfee = 3;\r\n    uint256 public sellfee = 15;\r\n    uint256 public constant distributeAmount = 10 * 10**18; // 10BONE\r\n\r\n    bool    private _swapping;\r\n    uint256 private _swapAmount;\r\n    uint256 private constant _totalSupply = 10000 * 10000 * 10000 * (10**18);\r\n\r\n    address[] public holders;\r\n    uint256 private _idx;\r\n\r\n    TokenBus public tokenDistributor;\r\n\r\n    mapping(address => bool) private _isHolder;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    event Launched(uint256 blockNumber);\r\n\r\n    constructor(address to) ERC20(\"BABYSHIB\", \"BABYSHIB\", 18) {\r\n        wbone = IRouter(routerAddr).WETH();\r\n        mainpair = IFactory(IRouter(routerAddr).factory()).createPair(wbone, address(this));\r\n\r\n        tokenDistributor = new TokenBus(wbone, msg.sender);\r\n\r\n        _swapAmount = _totalSupply.div(1000);\r\n\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(marketingAddr, true);\r\n        excludeFromFees(msg.sender, true);\r\n        excludeFromFees(to, true);\r\n\r\n        _mint(to, _totalSupply);\r\n        _approve(address(this), routerAddr, ~uint256(0));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function launch() external onlyOwner {\r\n        require(!launched, \"Already launched\");\r\n        launched = true;\r\n        emit Launched(block.number);\r\n    }\r\n\r\n    function setFees(uint256 _buyfee, uint256 _sellfee) external onlyOwner {\r\n        require(_buyfee <= buyfee && _sellfee <= sellfee, \"Can't increase fees\");\r\n        buyfee = _buyfee;\r\n        sellfee = _sellfee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(amount != 0);\r\n        require(launched || _isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n\r\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            if (to == mainpair && !_swapping && balanceOf(address(this)) >= _swapAmount) {\r\n                _swapping = true;\r\n                _swapWBone(balanceOf(address(this)).div(3), address(tokenDistributor));\r\n                _swapBone(balanceOf(address(this)), marketingAddr);\r\n                _swapping = false;\r\n            }\r\n\r\n            if (!_swapping) {\r\n                uint256 fee = from == mainpair ? buyfee : to == mainpair ? sellfee : 0;\r\n                uint256 feeAmount = amount.mul(fee).div(100);\r\n                if (feeAmount > 0) { amount = amount.sub(feeAmount); super._transfer(from, address(this), feeAmount); }\r\n                if (amount > 1) amount = amount.sub(1);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        if (!_swapping) {\r\n            _addHolder(to);\r\n            _processReward(500000);\r\n        }\r\n    }\r\n\r\n    function _swapWBone(uint256 amount, address to) internal {\r\n        if (amount == 0) return;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = wbone;\r\n        IRouter(routerAddr).swapExactTokensForTokens(amount, 0, path, to, block.timestamp);\r\n    }\r\n\r\n    function _swapBone(uint256 amount, address to) internal {\r\n        if (amount == 0) return;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = wbone;\r\n        IRouter(routerAddr).swapExactTokensForETH(amount, 0, path, to, block.timestamp);\r\n    }\r\n\r\n    function _addHolder(address adr) internal {\r\n        if (adr == mainpair) return;\r\n        if (_isExcludedFromFees[adr]) return;\r\n        if (_isHolder[adr]) return;\r\n        if (balanceOf(adr) < _totalSupply.div(10000)) return;\r\n\r\n        holders.push(adr);\r\n        _isHolder[adr] = true;\r\n    }\r\n\r\n    function _processReward(uint256 gas) internal {\r\n        uint256 wboneBalance = IERC20(wbone).balanceOf(address(tokenDistributor));\r\n        if (wboneBalance < distributeAmount) return;\r\n\r\n        TransferHelper.safeTransferFrom(wbone, address(tokenDistributor), address(this), wboneBalance);\r\n        IWETH(wbone).withdraw(wboneBalance);\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address holder;\r\n        uint256 holderBalance;\r\n        uint256 amount;\r\n\r\n        uint256 holderCount = holders.length;\r\n\r\n        while (gasUsed < gas && iterations < holderCount) {\r\n            if (_idx >= holderCount) _idx = 0;\r\n            holder = holders[_idx];\r\n            holderBalance = balanceOf(holder);\r\n\r\n            if (holderBalance >= _totalSupply.div(10000)) {\r\n                amount = wboneBalance.mul(holderBalance).div(_totalSupply);\r\n                TransferHelper.safeTransferETH(holder, amount);\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            _idx++;\r\n            iterations++;\r\n        }\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	}